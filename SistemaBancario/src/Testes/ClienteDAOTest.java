package Testes;

import Model.Cliente;
import repository.ClienteDAO;

import org.junit.jupiter.api.*;

import java.sql.SQLException;

import static org.junit.jupiter.api.Assertions.*;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class ClienteDAOTest {

    static ClienteDAO clienteDAO;
    static String cpfTeste = "99999999999"; // CPF fict√≠cio usado para testes

    @BeforeAll
    static void setup() {
        clienteDAO = new ClienteDAO();
        System.out.println("\nüîß Iniciando testes da classe ClienteDAO...\n");
    }

    @Test
    @Order(1)
    void testInserirCliente() throws SQLException {
        Cliente cliente = new Cliente(cpfTeste, "Teste Nome", "teste@email.com", "senha123");
        clienteDAO.inserir(cliente);

        Cliente buscado = clienteDAO.buscarPorCpf(cpfTeste);
        System.out.println("üü¢ Inser√ß√£o realizada. Cliente encontrado: " + (buscado != null));

        assertNotNull(buscado, "Cliente deveria ter sido inserido no banco.");
        assertEquals("Teste Nome", buscado.getNome(), "Nome n√£o corresponde ap√≥s inser√ß√£o.");
    }

    @Test
    @Order(2)
    void testAtualizarCliente() throws SQLException {
        Cliente cliente = clienteDAO.buscarPorCpf(cpfTeste);
        assertNotNull(cliente, "Cliente de teste n√£o encontrado para atualiza√ß√£o.");

        cliente.setNome("Nome Atualizado");
        cliente.setEmail("novoemail@email.com");
        cliente.setSenha("novasenha");

        clienteDAO.atualizar(cliente);

        Cliente atualizado = clienteDAO.buscarPorCpf(cpfTeste);

        System.out.println("üîÑ Atualiza√ß√£o realizada:");
        System.out.println("   ‚û§ Nome: " + atualizado.getNome());
        System.out.println("   ‚û§ Email: " + atualizado.getEmail());

        assertEquals("Nome Atualizado", atualizado.getNome(), "Nome n√£o atualizado corretamente.");
        assertEquals("novoemail@email.com", atualizado.getEmail(), "Email n√£o atualizado corretamente.");
    }

    @Test
    @Order(3)
    void testDeletarCliente() throws SQLException {
        clienteDAO.deletar(cpfTeste);
        Cliente excluido = clienteDAO.buscarPorCpf(cpfTeste);

        System.out.println("‚ùå Cliente deletado. Existe no banco? " + (excluido != null));

        assertNull(excluido, "Cliente deveria ter sido exclu√≠do do banco.");
    }

    @AfterAll
    static void finalizar() {
        System.out.println("\n‚úÖ Testes da classe ClienteDAO finalizados com sucesso.\n");
    }
}
